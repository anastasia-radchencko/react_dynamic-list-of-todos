{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Filter.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onShowTodo","selectedTodo","isTodoSelected","id","className","map","todo","classNames","completed","title","type","onClick","TodoFilter","query","onQueryChange","filterBy","setFilterBy","value","onChange","target","placeholder","event","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterBy","TodoModal","handleClose","useState","user","setUser","fetchData","a","userId","currentUser","Error","console","warn","message","useEffect","href","email","name","App","setTodos","setSelectedTodo","setQuery","All","isDataLoading","setIsDataLoading","isLoadingError","setIsLoadingError","visibleTodos","filteredBy","preparedTodos","preparedQuery","trim","toLowerCase","filter","includes","ACTIVE","COMPLETED","filteredTodos","data","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9c5e4b3.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onShowTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onShowTodo,\n  selectedTodo,\n}) => {\n  const isTodoSelected = (id: number) => selectedTodo?.id === id;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isTodoSelected(todo.id),\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-succes': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {isTodoSelected(todo.id) ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onShowTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterBy } from '../../types/Filter';\n\ntype Props = {\n  query: string;\n  onQueryChange: (query: string) => void;\n  filterBy: FilterBy;\n  setFilterBy: (filterBy: FilterBy) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  filterBy,\n  setFilterBy,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={({ target }) => {\n            setFilterBy(target.value as FilterBy);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => {\n          onQueryChange(event.target.value);\n        }}\n      />\n\n      {query.length > 0 && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onQueryChange('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterBy {\n  All = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  handleClose: () => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, handleClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const fetchData = async () => {\n    try {\n      const currentUser = await getUser(selectedTodo?.userId || 0);\n\n      setUser(currentUser);\n    } catch (error) {\n      if (error instanceof Error) {\n        // eslint-disable-next-line no-console\n        console.warn(error.message);\n      }\n\n      // eslint-disable-next-line no-console\n      console.warn('Unexpected error');\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/Todo';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterBy } from './types/Filter';\n\nconst filteredTodos = (todos: Todo[], query: string, filteredBy: FilterBy) => {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const preparedQuery = query.trim().toLowerCase();\n\n    preparedTodos = preparedTodos.filter(todo => todo.title.toLowerCase().includes(preparedQuery));\n  }\n\n  switch (filteredBy) {\n    case FilterBy.ACTIVE:\n      preparedTodos = preparedTodos.filter(todo => !todo.completed);\n      break;\n\n    case FilterBy.COMPLETED:\n      preparedTodos = preparedTodos.filter(todo => todo.completed);\n      break;\n    case FilterBy.All:\n    default:\n      break;\n  }\n\n  return preparedTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<FilterBy>(FilterBy.All);\n  const [isDataLoading, setIsDataLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const visibleTodos = filteredTodos(todos, query, filterBy);\n\n  const fetchData = async () => {\n    try {\n      const data = await getTodos();\n\n      setTodos(data);\n      setIsDataLoading(false);\n    } catch {\n      setIsLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setSelectedTodo(null);\n  }, [selectedTodo]);\n\n  const onShowTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, [selectedTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                filterBy={filterBy}\n                setFilterBy={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isDataLoading && <Loader />}\n\n              {isLoadingError\n                ? <p>Error, server is unavailable</p>\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onShowTodo={onShowTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          handleClose={handleClose}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}